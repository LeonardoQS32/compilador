#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = Stream
Parser = LL
#RegularDefinitions
L  : [A-Za-z]
D  : [0-9]
WS : [\ \t\n\r]
OL : [< > =]
OA : ["/" "*" "+" "-"]
S : ["."","]

#Tokens
:{WS}*
id:{L} ({L}|{D})*
num:{D}+ ("." {D}+)?
string: '({L} | {D} | {WS} | {OL} | {OA} | {S})*'
label_program = id: "Programa"
label_var = id: "var"
write = id: "escreva"
read =id: "leia"
if = id: "se"
else = id: "senao"
while = id: "enquanto"
for = id: "para"
assign : "<-"
semicolon :";"
comma : ","
arit: {OA}
logic: {OL}{OL}?
open_brace : "{"
close_brace : "}"
open_par : "("
close_par : ")"
and: "&&"
or: "||"
#NonTerminals
<PROGRAM>

<COMMAND_LIST>
<COMMAND>

<DECLARATION>
<WRITE>
<READ>
<ASSIGNS>
<IF>
<WHILE>
<FOR>

<VAR_LIST>
<MORE_VAR>

<CONTENT_WRITE>
<CONTENT_LIST>
<MORE_CONTENT>
<CONTENT>

<ASSIGN>
<ARIT>
<VALUE>
<ARIT_LIST>
<MORE_ARIT>

<EXPRESSION>
<CONDITION>
<CONDITION_LIST>
<MORE_CONDITION>
<CONNECTIVES>




#Grammar
<PROGRAM> ::= label_program open_brace <COMMAND_LIST> close_brace;

<COMMAND_LIST> ::= <COMMAND> <COMMAND_LIST> | î;
<COMMAND> ::= <DECLARATION> | <WRITE> | <READ> | <ASSIGNS> | <IF> | <WHILE> | <FOR>;

<DECLARATION> ::= label_var id <VAR_LIST> semicolon;
<WRITE> ::= write open_par <CONTENT_WRITE> close_par semicolon;
<READ> ::= read open_par id close_par semicolon;
<ASSIGNS> ::= <ASSIGN>  semicolon;
<IF> ::= if open_par <EXPRESSION> close_par open_brace <COMMAND_LIST> close_brace î | else open_brace <COMMAND_LIST> close_brace;
<WHILE> ::= while open_par <EXPRESSION> close_par open_brace <COMMAND_LIST> close_brace;
<FOR> ::= for open_par <ASSIGN> semicolon <EXPRESSION> semicolon  <ASSIGN> close_par open_brace <COMMAND_LIST> close_brace;

<VAR_LIST> ::= <MORE_VAR> <VAR_LIST> | î;
<MORE_VAR> ::= comma id;

<CONTENT_WRITE> ::= <CONTENT> <CONTENT_LIST>;
<CONTENT_LIST> ::= <MORE_CONTENT> <CONTENT_LIST> | î;
<MORE_CONTENT> ::= comma <CONTENT>;
<CONTENT> ::= id | string | num;

<ASSIGN> ::= id assign <ARIT> |  arit id;
<ARIT> ::=  <VALUE> <ARIT_LIST>;
<VALUE> ::= id | num;
<VALUE> ::= open_par <ARIT> close_par;
<ARIT_LIST> ::= <MORE_ARIT> <ARIT_LIST> | î;
<MORE_ARIT> ::= arit <VALUE>;

<EXPRESSION> ::= <CONDITION> <CONDITION_LIST>;
<CONDITION> ::= <VALUE> logic <VALUE>;
<CONDITION_LIST> ::= <MORE_CONDITION> <CONDITION_LIST> | î;
<MORE_CONDITION> ::= <CONNECTIVES> <CONDITION>;
<CONNECTIVES> ::= and | or;





